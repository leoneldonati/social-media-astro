---
import {
  IconCake,
  IconCalendarClock,
  IconMapPin,
  IconPoint,
} from "@tabler/icons-react";
import Layout from "../../layouts/Layout.astro";
import { authStore } from "../../stores/auth";
import { get } from "../../helpers/fetch";
import PostCardProfile from "../../components/post-card-profile.astro";

const userLogged = authStore.get().userLogged!;

const avatar = JSON.parse(userLogged.avatar).original.secureUrl as string;
const createdAt = new Date(userLogged.createdAt).toLocaleDateString("es");
const userBd = new Date(userLogged.DATE).toLocaleDateString("es");

const headers = new Headers();
headers.append("Cookie", `session=${Astro.cookies.get("session")?.value}`);
const { ok, data, error } = await get(`users?id=${userLogged.id}`, { headers });

const posts = ok ? (data.posts as PostProfile[]) : [];
---

<Layout page={`@${userLogged.username}`} description={userLogged.bio}>
  <section class="profile">
    <img
      class="profile__img"
      src={avatar}
      alt={`${userLogged.name} avatar.`}
      loading="lazy"
      transition:name="avatar"
      title={userLogged.name}
    />

    <div class="profile__container">
      <h1 class="profile__h1">
        {userLogged.name}
        <IconPoint />
        <span class="profile__h1__span">@{userLogged.username}</span>
      </h1>

      <p class="profile_p">
        {userLogged.bio}
      </p>
      <ul class="profile__ul">
        <li>
          <IconCalendarClock /> Joined at: {createdAt}
        </li>
        <li>
          <IconCake /> Birthday: {userBd}
        </li>
        <li>
          <IconMapPin />
          {userLogged.location ? userLogged.location : "None"}
        </li>
      </ul>

      <a class="profile__btn--edit" href={`/profile/${userLogged.id}`}>
        Edit profile
      </a>
    </div>

    <hr style="margin-bottom: 16px;" />
    <div class="profile__container--posts">
      {posts.map((post) => <PostCardProfile post={post} />)}
    </div>
  </section>
</Layout>

<style>
  .profile {
    position: relative;
    min-height: 100dvh;
    max-width: var(--max_w);
    margin: 0 auto;
    padding: 6px;
    display: flex;
    flex-flow: column;
  }
  .profile__img {
    display: flex;
    aspect-ratio: 4 / 4;
    object-fit: cover;
    object-position: center;
    border-radius: 100%;
    max-width: 400px;
    margin: 0 auto;
    box-shadow: 0 0 8px var(--color_secondary);
  }
  .profile__container {
    position: relative;
    margin: 16px 0;
  }
  .profile__container--posts {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    flex: 1;
  }
  .profile__btn--edit {
    position: absolute;
    top: 0;
    right: 0;
    display: block;
    max-width: fit-content;
    border-radius: var(--border_size);
    padding: var(--padding_boxes);
    background-color: var(--color_accent);
    color: #fff;
    box-shadow: 0 0 4px var(--color_accent_light);
    transition: transform 0.2s ease;

    &:hover {
      transform: scale(0.98);
    }
  }
  .profile__h1 {
    display: flex;
  }
  .profile__h1__span {
    color: var(--color_secondary_text);
  }
  .profile__ul {
    color: var(--color_secondary_text);
  }
</style>
